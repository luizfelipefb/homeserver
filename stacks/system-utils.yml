version: "3"

services:
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    restart: unless-stopped
    network_mode: host
    environment:
      - TZ=${TIMEZONE}
      - WEB_PORT=8053
      - INTERFACE=enp3s0
    volumes:
      - ${CONFIG}/pihole/etc-pihole:/etc/pihole
      - ${CONFIG}/pihole/etc-dnsmasq.d:/etc/dnsmasq.d
    cap_add:
      - NET_ADMIN
    labels:
      - traefik.enable=true
      - traefik.http.services.pihole.loadbalancer.server.port=8053
      - traefik.http.routers.pihole.rule=Host(`pihole.${DOMAIN}`)
      - traefik.http.routers.pihole.entrypoints=web,websecure
      - traefik.http.routers.pihole.tls=true
      - traefik.http.routers.pihole.tls.certresolver=staging

  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    network_mode: host
    volumes:
      - ${CONFIG}/portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - traefik.enable=true
      - traefik.http.services.portainer.loadbalancer.server.port=9443
      - traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN}`)
      - traefik.http.routers.portainer.entrypoints=web,websecure
      - traefik.http.routers.portainer.tls=true
      - traefik.http.routers.portainer.tls.certresolver=staging

  traefik:
    container_name: traefik
    image: traefik:latest
    network_mode: host
    restart: unless-stopped
    environment:
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG}/traefik:/ssl-certs
      - ${PWD}/config/traefik.yml:/etc/traefik/traefik.yml
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - traefik.enable=true
      - traefik.http.services.traefik.loadbalancer.server.port=8080
      - traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)
      - traefik.http.routers.traefik.entrypoints=web,websecure
      - traefik.http.routers.traefik.tls=true
      - traefik.http.routers.traefik.tls.certresolver=staging

  ddclient:
    container_name: ddclient
    image: lscr.io/linuxserver/ddclient:latest
    network_mode: host
    restart: unless-stopped
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG}/ddclinet:/config

  watchtower:
    container_name: watchtower
    image: containrrr/watchtower
    network_mode: host
    restart: unless-stopped
    environment:
      - TZ=${TIMEZONE}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --cleanup --interval 3600
