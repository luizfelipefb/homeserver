services:
  beszel:
    image: henrygd/beszel:latest
    container_name: beszel
    restart: always
    environment:
      TZ: ${TIMEZONE}
    ports:
      - 8091:8090
    volumes:
      - ${CONFIG}/beszel:/beszel_data
    labels:
      - traefik.enable=true
      - traefik.http.services.beszel.loadbalancer.server.port=8090
      - traefik.http.routers.beszel.rule=Host(`beszel.${DOMAIN}`)
      - traefik.http.routers.beszel.entrypoints=websecure
      - traefik.http.routers.beszel.tls.certResolver=default
      - traefik.http.routers.beszel.tls.domains[0].main=${DOMAIN}
      - traefik.http.routers.beszel.tls.domains[0].sans=*.${DOMAIN}

  beszel-agent:
    image: henrygd/beszel-agent:latest
    container_name: beszel-agent
    restart: always
    network_mode: host
    environment:
      TZ: ${TIMEZONE}
      LISTEN: 45876
      KEY: 'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFFOeIAdRpwoIoV93MjH47hWSnDoricrj7DU7ROqfbpv'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    restart: always
    user: ${UID}
    ports:
      - 3000:3000
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_NAME: Organization
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - ${CONFIG}/grafana/data:/var/lib/grafana
    labels:
      - traefik.enable=true
      - traefik.http.services.grafana.loadbalancer.server.port=3000
      - traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)
      - traefik.http.routers.grafana.entrypoints=websecure
      - traefik.http.routers.grafana.tls.certResolver=default
      - traefik.http.routers.grafana.tls.domains[0].main=${DOMAIN}
      - traefik.http.routers.grafana.tls.domains[0].sans=*.${DOMAIN}
      - traefik.http.routers.grafana.middlewares=tinyauth

  influxdb:
    container_name: influxdb
    image: influxdb:latest
    restart: always
    volumes:
      - ${CONFIG}/influxdb:/var/lib/influxdb
    healthcheck:
      test: 'curl -f http://localhost:8086/health'
      interval: 3s
      timeout: 10s
      retries: 10
    ports:
      - 8086:8086
    labels:
      - traefik.enable=true
      - traefik.http.services.influxdb.loadbalancer.server.port=8086
      - traefik.http.routers.influxdb.rule=Host(`influxdb.${DOMAIN}`)
      - traefik.http.routers.influxdb.entrypoints=websecure
      - traefik.http.routers.influxdb.tls.certResolver=default
      - traefik.http.routers.influxdb.tls.domains[0].main=${DOMAIN}
      - traefik.http.routers.influxdb.tls.domains[0].sans=*.${DOMAIN}

  scrutiny:
    container_name: scrutiny
    image: ghcr.io/analogj/scrutiny:master-omnibus
    restart: always
    ports:
      - 8085:8080
    environment:
      TZ: ${TIMEZONE}
      PUID: ${UID}
      PGID: ${GID}
    cap_add:
      - SYS_RAWIO
      - SYS_ADMIN
    volumes:
      - ${CONFIG}/scrutiny:/opt/scrutiny/config
      - /run/udev:/run/udev:ro
    devices:
      - /dev/sda
      - /dev/sdb
    labels:
      - traefik.enable=true
      - traefik.http.services.scrutiny.loadbalancer.server.port=8080
      - traefik.http.routers.scrutiny.service=scrutiny
      - traefik.http.routers.scrutiny.rule=Host(`scrutiny.${DOMAIN}`)
      - traefik.http.routers.scrutiny.entrypoints=websecure
      - traefik.http.routers.scrutiny.tls.certResolver=default
      - traefik.http.routers.scrutiny.tls.domains[0].main=${DOMAIN}
      - traefik.http.routers.scrutiny.tls.domains[0].sans=*.${DOMAIN}
      - traefik.http.routers.scrutiny.middlewares=tinyauth

  tautulli:
    container_name: tautulli
    image: linuxserver/tautulli:latest
    restart: always
    ports:
      - 8181:8181
    environment:
      TZ: ${TIMEZONE}
      PUID: ${UID}
      PGID: ${GID}
    volumes:
      - ${CONFIG}/tautulli:/config
      - ${CONFIG}/plex/Library/Application Support/Plex Media Server/Logs:/logs
    labels:
      - traefik.enable=true
      - traefik.http.services.tautulli.loadbalancer.server.port=8181
      - traefik.http.routers.tautulli.rule=Host(`tautulli.${DOMAIN}`)
      - traefik.http.routers.tautulli.entrypoints=websecure
      - traefik.http.routers.tautulli.tls.certResolver=default
      - traefik.http.routers.tautulli.tls.domains[0].main=${DOMAIN}
      - traefik.http.routers.tautulli.tls.domains[0].sans=*.${DOMAIN}

  telegraf:
    container_name: telegraf
    image: telegraf:latest
    restart: always
    user: telegraf:${DOCKER_GID}
    depends_on:
      influxdb:
        condition: service_healthy
    environment:
      HOST_MOUNT_PREFIX: /hostfs
      HOST_ETC: /hostfs/etc
      HOST_PROC: /hostfs/proc
      HOST_SYS: /hostfs/sys
      HOST_VAR: /hostfs/var
      HOST_RUN: /hostfs/run
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN}
    volumes:
      - /proc:/hostfs/proc:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /mnt/disk1:/hostfs/mnt/disk1
      - ../config/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    labels:
      - traefik.enable=false
