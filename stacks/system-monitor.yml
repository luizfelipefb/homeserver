services:
  influxdb1:
    container_name: influxdb1
    image: influxdb:1.8
    restart: always
    ports:
      - 8087:8086
    volumes:
      - ${CONFIG}/influxdb1:/var/lib/influxdb
#    healthcheck:
#      test: "curl -f http://localhost:8086/ping"
#      interval: 3s
#      timeout: 10s
#      retries: 10
    labels:
      - traefik.enable=false

  influxdb2:
    container_name: influxdb2
    image: influxdb:latest
    restart: always
    ports:
      - 8088:8086
    volumes:
      - ${CONFIG}/influxdb2:/var/lib/influxdb2
#    healthcheck:
#      test: "curl -f http://localhost:8086/health"
#      interval: 3s
#      timeout: 10s
#      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.services.influxdb2.loadbalancer.server.port=8086
      - traefik.http.routers.influxdb2.rule=Host(`influxdb2.${DOMAIN}`)
      - traefik.http.routers.influxdb2.entrypoints=websecure
      - traefik.http.routers.influxdb2.tls.certResolver=default
      - traefik.http.routers.influxdb2.tls.domains[0].main=${DOMAIN}
      - traefik.http.routers.influxdb2.tls.domains[0].sans=*.${DOMAIN}

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    restart: always
    user: ${UID}
    ports:
      - 3000:3000
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_NAME=Organization
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - ${CONFIG}/grafana/data:/var/lib/grafana
    labels:
      - traefik.enable=true
      - traefik.http.services.grafana.loadbalancer.server.port=3000
      - traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)
      - traefik.http.routers.grafana.entrypoints=websecure
      - traefik.http.routers.grafana.tls.certResolver=default
      - traefik.http.routers.grafana.tls.domains[0].main=${DOMAIN}
      - traefik.http.routers.grafana.tls.domains[0].sans=*.${DOMAIN}

  telegraf:
    container_name: telegraf
    image: telegraf:latest
    restart: always
    user: telegraf:${DOCKER_GID}
#    depends_on:
#      influxdb2:
#        condition: service_healthy
    environment:
      - HOST_MOUNT_PREFIX=/hostfs
      - HOST_ETC=/hostfs/etc
      - HOST_PROC=/hostfs/proc
      - HOST_SYS=/hostfs/sys
      - HOST_VAR=/hostfs/var
      - HOST_RUN=/hostfs/run
      - INFLUXDB2_TOKEN=${INFLUXDB2_TOKEN}
    volumes:
      - /proc:/hostfs/proc:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /mnt/disk1:/hostfs/mnt/disk1
      - ../config/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    labels:
      - traefik.enable=false

  varken:
    container_name: varken
    image: boerderij/varken:latest
    restart: always
    depends_on:
      tautulli:
        condition: service_started
#      influxdb1:
#        condition: service_healthy
    environment:
      - TZ=${TIMEZONE}
      - PUID=${UID}
      - PGID=${GID}
      - VRKN_GLOBAL_SONARR_SERVER_IDS=1
      - VRKN_GLOBAL_RADARR_SERVER_IDS=1
      - VRKN_GLOBAL_LIDARR_SERVER_IDS=false
      - VRKN_GLOBAL_TAUTULLI_SERVER_IDS=1
      - VRKN_GLOBAL_OMBI_SERVER_IDS=1
      - VRKN_GLOBAL_SICKCHILL_SERVER_IDS=false
      - VRKN_GLOBAL_UNIFI_SERVER_IDS=false
      - VRKN_GLOBAL_MAXMIND_LICENSE_KEY=${MAXMIND_LICENSE_KEY}
      - VRKN_INFLUXDB_URL=10.69.4.20
      - VRKN_INFLUXDB_PORT=8087
      - VRKN_TAUTULLI_1_URL=10.69.4.20:8181
      - VRKN_TAUTULLI_1_APIKEY=${TAUTULLI_APIKEY}
      - VRKN_SONARR_1_URL=10.69.4.20:8989
      - VRKN_SONARR_1_APIKEY=${SONARR_APIKEY}
      - VRKN_RADARR_1_URL=10.69.4.20:7878
      - VRKN_RADARR_1_APIKEY=${RADARR_APIKEY}
      - VRKN_OMBI_1_URL=10.69.4.20:3579
      - VRKN_OMBI_1_APIKEY=${OMBI_APIKEY}
    volumes:
      - ${CONFIG}/varken:/config
    labels:
      - traefik.enable=false

  tautulli:
    container_name: tautulli
    image: linuxserver/tautulli:latest
    restart: always
    ports:
      - 8181:8181
    environment:
      - TZ=${TIMEZONE}
      - PUID=${UID}
      - PGID=${GID}
    volumes:
      - ${CONFIG}/tautulli:/config
      - ${CONFIG}/plex/Library/Application Support/Plex Media Server/Logs:/logs
    labels:
      - traefik.enable=true
      - traefik.http.services.tautulli.loadbalancer.server.port=8181
      - traefik.http.routers.tautulli.rule=Host(`tautulli.${DOMAIN}`)
      - traefik.http.routers.tautulli.entrypoints=websecure
      - traefik.http.routers.tautulli.tls.certResolver=default
      - traefik.http.routers.tautulli.tls.domains[0].main=${DOMAIN}
      - traefik.http.routers.tautulli.tls.domains[0].sans=*.${DOMAIN}

  scrutiny:
    container_name: scrutiny
    image: ghcr.io/analogj/scrutiny:master-omnibus
    restart: always
    ports:
      - 8085:8080
      - 8086:8086
    environment:
      - TZ=${TIMEZONE}
      - PUID=${UID}
      - PGID=${GID}
    cap_add:
      - SYS_RAWIO
      - SYS_ADMIN
    volumes:
      - ${CONFIG}/scrutiny-config:/opt/scrutiny/config
      - ${CONFIG}/scrutiny-influxdb:/opt/scrutiny/influxdb
      - /run/udev:/run/udev:ro
    devices:
      - /dev/sda
      - /dev/sdb
    labels:
      - traefik.enable=true
      - traefik.http.services.scrutiny.loadbalancer.server.port=8080
      - traefik.http.routers.scrutiny.service=scrutiny
      - traefik.http.routers.scrutiny.rule=Host(`scrutiny.${DOMAIN}`)
      - traefik.http.routers.scrutiny.entrypoints=websecure
      - traefik.http.routers.scrutiny.tls.certResolver=default
      - traefik.http.routers.scrutiny.tls.domains[0].main=${DOMAIN}
      - traefik.http.routers.scrutiny.tls.domains[0].sans=*.${DOMAIN}
      - traefik.http.services.scrutinyinfluxdb.loadbalancer.server.port=8086
      - traefik.http.routers.scrutinyinfluxdb.service=scrutinyinfluxdb
      - traefik.http.routers.scrutinyinfluxdb.rule=Host(`scrutinyinfluxdb.${DOMAIN}`)
      - traefik.http.routers.scrutinyinfluxdb.entrypoints=websecure
      - traefik.http.routers.scrutinyinfluxdb.tls.certResolver=default
      - traefik.http.routers.scrutinyinfluxdb.tls.domains[0].main=${DOMAIN}
      - traefik.http.routers.scrutinyinfluxdb.tls.domains[0].sans=*.${DOMAIN}
